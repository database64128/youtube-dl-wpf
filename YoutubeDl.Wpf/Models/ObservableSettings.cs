using MaterialDesignThemes.Wpf;
using ReactiveUI;
using ReactiveUI.SourceGenerators;
using System;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Reactive.Linq;
using YoutubeDl.Wpf.Utils;

namespace YoutubeDl.Wpf.Models;

public partial class ObservableSettings : ReactiveObject
{
    private readonly IObservable<bool> _canShowDlBinaryInFolder;
    private readonly IObservable<bool> _canShowFfmpegBinaryInFolder;

    public IObservable<bool> IsDlBinaryValidObservable => _canShowDlBinaryInFolder;

    public Settings AppSettings { get; }

    [Reactive]
    private BaseTheme _appColorMode;

    [Reactive]
    private double _windowWidth;

    [Reactive]
    private double _windowHeight;

    [Reactive]
    private double _configureDownloadRowDefinitionHeight;

    [Reactive]
    private BackendTypes _backend;

    [Reactive]
    private string _backendPath;

    /// <summary>
    /// Gets or sets the list of arguments passed
    /// to the backend process for all types of operations.
    /// </summary>
    public ObservableCollection<BackendArgument> BackendGlobalArguments { get; }

    [Reactive]
    private bool _backendAutoUpdate;

    [Reactive]
    private DateTimeOffset _backendLastUpdateCheck;

    [Reactive]
    private string _ffmpegPath;

    [Reactive]
    private string _proxy;

    [Reactive]
    private int _loggingMaxEntries;

    [Reactive]
    private bool _logToFiles;

    [Reactive]
    private Preset? _selectedPreset;

    /// <summary>
    /// This is a hack to prevent <see cref="SelectedPreset"/> from being changed to null.
    /// Another solution is to manually implement equality for <see cref="Preset"/>,
    /// which is much harder to get it right, and would look terrible compared to this little hack.
    /// </summary>
    [Reactive]
    private string _selectedPresetText;

    [Reactive]
    private string _subtitleLanguages;

    [Reactive]
    private bool _addMetadata;

    [Reactive]
    private bool _downloadThumbnail;

    [Reactive]
    private bool _downloadSubtitles;

    [Reactive]
    private bool _downloadAutoGeneratedSubtitles;

    [Reactive]
    private bool _downloadPlaylist;

    [Reactive]
    private bool _useCustomOutputTemplate;

    [Reactive]
    private string _customOutputTemplate;

    [Reactive]
    private bool _useCustomPath;

    [Reactive]
    private string _downloadPath;

    [Reactive]
    private bool _useCookiesFile;

    [Reactive]
    private string _cookiesFilePath;

    [Reactive]
    private bool _useCookiesBrowser;

    [Reactive]
    private string _cookiesBrowserArg;

    [ObservableAsProperty]
    private bool _isDlBinaryValid;

    [ObservableAsProperty]
    private bool _isDlBinaryHintVisible;

    [ObservableAsProperty]
    private bool _isFfmpegBinaryValid;

    [ObservableAsProperty]
    private bool _isProxyUrlValid;

    [ObservableAsProperty]
    private bool _isAnySubtitleDownloadEnabled;

    public ObservableSettings(Settings settings)
    {
        AppSettings = settings;
        _appColorMode = settings.AppColorMode;
        _windowWidth = settings.WindowWidth;
        _windowHeight = settings.WindowHeight;
        _configureDownloadRowDefinitionHeight = settings.ConfigureDownloadRowDefinitionHeight;
        _backend = settings.Backend;
        _backendPath = settings.BackendPath;
        BackendGlobalArguments = [.. settings.BackendGlobalArguments];
        _backendAutoUpdate = settings.BackendAutoUpdate;
        _backendLastUpdateCheck = settings.BackendLastUpdateCheck;
        _ffmpegPath = settings.FfmpegPath;
        _proxy = settings.Proxy;
        _loggingMaxEntries = settings.LoggingMaxEntries;
        _logToFiles = settings.LogToFiles;
        _selectedPreset = settings.SelectedPreset;
        _selectedPresetText = settings.SelectedPreset.Name;
        _subtitleLanguages = settings.SubtitleLanguages;
        _addMetadata = settings.AddMetadata;
        _downloadThumbnail = settings.DownloadThumbnail;
        _downloadSubtitles = settings.DownloadSubtitles;
        _downloadAutoGeneratedSubtitles = settings.DownloadAutoGeneratedSubtitles;
        _downloadPlaylist = settings.DownloadPlaylist;
        _useCustomOutputTemplate = settings.UseCustomOutputTemplate;
        _customOutputTemplate = settings.CustomOutputTemplate;
        _useCustomPath = settings.UseCustomPath;
        _downloadPath = settings.DownloadPath;
        _useCookiesFile = settings.UseCookiesFile;
        _cookiesFilePath = settings.CookiesFilePath;
        _useCookiesBrowser = settings.UseCookiesBrowser;
        _cookiesBrowserArg = settings.CookiesBrowserArg;

        IObservable<(string dlPath, bool dlBinaryExists)> backendPathObservable = this
            .WhenAnyValue(x => x.BackendPath, dlPath => (dlPath, File.Exists(dlPath)));
        _canShowDlBinaryInFolder = backendPathObservable
            .Select(x => x.dlBinaryExists);
        _isDlBinaryValidHelper = _canShowDlBinaryInFolder
            .ToProperty(this, x => x.IsDlBinaryValid);
        _isDlBinaryHintVisibleHelper = backendPathObservable
            .Select(x => !x.dlBinaryExists && !string.IsNullOrEmpty(x.dlPath))
            .ToProperty(this, x => x.IsDlBinaryHintVisible);

        // Guess the backend type from binary name.
        backendPathObservable.Subscribe(x =>
        {
            if (x.dlBinaryExists)
            {
                switch (Path.GetFileNameWithoutExtension(x.dlPath))
                {
                    case "youtube-dl":
                        Backend = BackendTypes.Ytdl;
                        break;
                    case "yt-dlp":
                        Backend = BackendTypes.Ytdlp;
                        break;
                }
            }
        });

        IObservable<(string ffmpegPath, bool ffmpegBinaryExists)> ffmpegPathObservable = this
            .WhenAnyValue(x => x.FfmpegPath, ffmpegPath => (ffmpegPath, File.Exists(ffmpegPath)));
        _canShowFfmpegBinaryInFolder = ffmpegPathObservable
            .Select(x => x.ffmpegBinaryExists);
        _isFfmpegBinaryValidHelper = ffmpegPathObservable
            .Select(x => x.ffmpegBinaryExists || string.IsNullOrEmpty(x.ffmpegPath))
            .ToProperty(this, x => x.IsFfmpegBinaryValid);

        _isProxyUrlValidHelper = this
            .WhenAnyValue(x => x.Proxy, proxy => string.IsNullOrEmpty(proxy) || (Uri.TryCreate(proxy, UriKind.Absolute, out Uri? uri) && (uri.Scheme is "socks5" or "http" or "https")))
            .ToProperty(this, x => x.IsProxyUrlValid);

        _isAnySubtitleDownloadEnabledHelper = this
            .WhenAnyValue(x => x.DownloadSubtitles, x => x.DownloadAutoGeneratedSubtitles, (subs, autoSubs) => subs || autoSubs)
            .ToProperty(this, x => x.IsAnySubtitleDownloadEnabled);
    }

    public void UpdateAppSettings()
    {
        AppSettings.AppColorMode = AppColorMode;
        AppSettings.WindowWidth = WindowWidth;
        AppSettings.WindowHeight = WindowHeight;
        AppSettings.ConfigureDownloadRowDefinitionHeight = ConfigureDownloadRowDefinitionHeight;
        AppSettings.Backend = Backend;
        AppSettings.BackendPath = BackendPath;
        AppSettings.BackendGlobalArguments = [.. BackendGlobalArguments];
        AppSettings.BackendAutoUpdate = BackendAutoUpdate;
        AppSettings.BackendLastUpdateCheck = BackendLastUpdateCheck;
        AppSettings.FfmpegPath = FfmpegPath;
        AppSettings.Proxy = Proxy;
        // AppSettings.LoggingMaxEntries is managed by the validation handler.
        AppSettings.LogToFiles = LogToFiles;
        AppSettings.SelectedPreset = SelectedPreset ?? Preset.Auto;
        AppSettings.SubtitleLanguages = SubtitleLanguages;
        AppSettings.AddMetadata = AddMetadata;
        AppSettings.DownloadThumbnail = DownloadThumbnail;
        AppSettings.DownloadSubtitles = DownloadSubtitles;
        AppSettings.DownloadAutoGeneratedSubtitles = DownloadAutoGeneratedSubtitles;
        AppSettings.DownloadPlaylist = DownloadPlaylist;
        AppSettings.UseCustomOutputTemplate = UseCustomOutputTemplate;
        AppSettings.CustomOutputTemplate = CustomOutputTemplate;
        AppSettings.UseCustomPath = UseCustomPath;
        AppSettings.DownloadPath = DownloadPath;
        AppSettings.UseCookiesFile = UseCookiesFile;
        AppSettings.CookiesFilePath = CookiesFilePath;
        AppSettings.UseCookiesBrowser = UseCookiesBrowser;
        AppSettings.CookiesBrowserArg = CookiesBrowserArg;
    }

    [ReactiveCommand]
    private void BrowseDlBinary()
    {
        if (BrowseBinary(BackendPath, out string? newPath, Backend.ToExecutableName()))
        {
            BackendPath = newPath;
        }
    }

    [ReactiveCommand]
    private void BrowseFfmpegBinary()
    {
        if (BrowseBinary(FfmpegPath, out string? newPath, "ffmpeg"))
        {
            FfmpegPath = newPath;
        }
    }

    private static bool BrowseBinary(string path, [NotNullWhen(true)] out string? newPath, string defaultFileName) =>
        WpfHelper.BrowseFile(path, out newPath, defaultFileName, ".exe", "Executables (.exe)|*.exe");

    [ReactiveCommand(CanExecute = nameof(_canShowDlBinaryInFolder))]
    private void ShowDlBinaryInFolder() => WpfHelper.ShowInFolder(BackendPath);

    [ReactiveCommand(CanExecute = nameof(_canShowFfmpegBinaryInFolder))]
    private void ShowFfmpegBinaryInFolder() => WpfHelper.ShowInFolder(FfmpegPath);
}
